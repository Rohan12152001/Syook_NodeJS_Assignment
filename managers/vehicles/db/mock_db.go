// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	data "github.com/Rohan12152001/Syook_Assignment/managers/items/data"
	gomock "github.com/golang/mock/gomock"
)

// MockItemsDBManager is a mock of ItemsDBManager interface.
type MockItemsDBManager struct {
	ctrl     *gomock.Controller
	recorder *MockItemsDBManagerMockRecorder
}

// MockItemsDBManagerMockRecorder is the mock recorder for MockItemsDBManager.
type MockItemsDBManagerMockRecorder struct {
	mock *MockItemsDBManager
}

// NewMockItemsDBManager creates a new mock instance.
func NewMockItemsDBManager(ctrl *gomock.Controller) *MockItemsDBManager {
	mock := &MockItemsDBManager{ctrl: ctrl}
	mock.recorder = &MockItemsDBManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemsDBManager) EXPECT() *MockItemsDBManagerMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockItemsDBManager) CreateItem(ItemName string, ItemPrice int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", ItemName, ItemPrice)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockItemsDBManagerMockRecorder) CreateItem(ItemName, ItemPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockItemsDBManager)(nil).CreateItem), ItemName, ItemPrice)
}

// GetAllItems mocks base method.
func (m *MockItemsDBManager) GetAllItems() ([]data.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItems")
	ret0, _ := ret[0].([]data.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItems indicates an expected call of GetAllItems.
func (mr *MockItemsDBManagerMockRecorder) GetAllItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItems", reflect.TypeOf((*MockItemsDBManager)(nil).GetAllItems))
}

// GetItem mocks base method.
func (m *MockItemsDBManager) GetItem(Id int) ([]data.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", Id)
	ret0, _ := ret[0].([]data.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockItemsDBManagerMockRecorder) GetItem(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockItemsDBManager)(nil).GetItem), Id)
}

// UpdateItem mocks base method.
func (m *MockItemsDBManager) UpdateItem(UpdatedItem data.ItemForUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", UpdatedItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemsDBManagerMockRecorder) UpdateItem(UpdatedItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemsDBManager)(nil).UpdateItem), UpdatedItem)
}
